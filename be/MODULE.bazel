"""plango module"""

module(
    name = "plango_monorepo",
    version = "0.0.1",
    compatibility_level = 1,
)

bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")
bazel_dep(name = "aspect_rules_lint", version = "1.5.1")
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "bazel_env.bzl", version = "0.5.0")
bazel_dep(name = "bazelrc-preset.bzl", version = "1.1.0")
bazel_dep(name = "rules_multirun", version = "0.12.0")
bazel_dep(name = "gazelle", version = "0.44.0")
bazel_dep(name = "rules_go", version = "0.55.1")
bazel_dep(name = "rules_multitool", version = "1.8.0")
bazel_dep(name = "rules_python", version = "1.5.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.5.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.1")
bazel_dep(name = "rules_uv", version = "0.84.0")
bazel_dep(name = "platforms", version = "1.0.0")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")

#########################
# Go
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.from_file(go_mod = "//:go.mod")
go_sdk.nogo(nogo = "//tools/lint:nogo")

go_deps = use_extension("@rules_go//go:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(go_deps)
#########################

#########################
# Python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.13.4",
)
use_repo(python, "python_3_13_4", "python_versions")

# Hermetic Python interpreter and pip dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.13.4",
    requirements_lock = "//requirements:all.txt",
)
use_repo(pip, "pip")
#########################
