"""plango module"""

module(
    name = "plango_monorepo",
    version = "0.0.2",
    compatibility_level = 1,
)

bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")
bazel_dep(name = "aspect_rules_lint", version = "1.5.1")
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "bazel_env.bzl", version = "0.5.0")
bazel_dep(name = "bazelrc-preset.bzl", version = "1.1.0")
bazel_dep(name = "rules_multirun", version = "0.12.0")
bazel_dep(name = "gazelle", version = "0.44.0")
bazel_dep(name = "rules_go", version = "0.55.1")
bazel_dep(name = "rules_multitool", version = "1.8.0")
bazel_dep(name = "rules_python", version = "1.5.1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.5.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.1")
bazel_dep(name = "rules_uv", version = "0.84.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_java", version = "8.15.2")
bazel_dep(name = "rules_jvm_external", version = "6.8")
bazel_dep(name = "rules_spring", version = "2.6.3")
bazel_dep(name = "contrib_rules_jvm", version = "0.30.0")
bazel_dep(name = "rules_oci", version = "2.2.6")

multitool = use_extension("@rules_multitool//multitool:extension.bzl", "multitool")
multitool.hub(lockfile = "//tools:tools.lock.json")
use_repo(multitool, "multitool")

#########################
# Go
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.from_file(go_mod = "//:go.mod")
go_sdk.nogo(nogo = "//tools/lint:nogo")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# go_deps.gazelle_override(
# build_file_generation = "on",
# path = "github.com/cncf/xds/go",
# )

# All *direct* Go dependencies of the module have to be listed explicitly.
# Run 'bazel mod tidy' to update this
use_repo(
    go_deps,
    "com_github_gin_contrib_gzip",
    "com_github_gin_contrib_zap",
    "com_github_gin_gonic_gin",
    "com_google_cloud_go_storage",
    "org_mongodb_go_mongo_driver",
    "org_uber_go_fx",
    "org_uber_go_zap",
)
#########################

#########################
# Python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.13.4",
)
use_repo(python, "python_3_13_4", "python_versions")

# Hermetic Python interpreter and pip dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.13.4",
    requirements_lock = "//requirements:all.txt",
)
use_repo(pip, "pip")
#########################

#########################
# Java and other JVM languages
maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.from_toml(
    bom_modules = [
        "org.springframework.boot:spring-boot-dependencies",
        "org.junit:junit-bom",
    ],
    libs_versions_toml = "//gradle:libs.versions.toml",
)
maven.install(
    lock_file = "//:maven_install.json",
    repositories = [
        "https://maven.aliyun.com/repository/central",
        "https://maven.aliyun.com/repository/public",

        # Main maven Central
        "https://repo.maven.apache.org/maven2",
    ],
)
use_repo(maven, "maven")
#########################

#########################
# OCI
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Base image for Golang Containers.
oci.pull(
    name = "distroless_base",
    digest = "sha256:06c713c675e983c5aea030592b1d635954218d29c4db2f8ec66912da1b87e228",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64")

# Base image for Python Containers.
oci.pull(
    name = "python_base",
    digest = "sha256:7c06e91f61fa88c08cc74f7e1b7c69ae24910d745357e0dfe1d2c0322aaf20f9",
    image = "ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(oci, "python_base", "python_base_linux_amd64", "python_base_linux_arm64_v8")

# Base image for Java Containers.
oci.pull(
    name = "distroless_java",
    digest = "sha256:dfea876744f635b5fea3ea53099410cfc5d17aeea7b62887310512d78094f6f3",
    image = "gcr.io/distroless/java21",
    platforms = [
        "linux/amd64",
    ],
)
use_repo(oci, "distroless_java", "distroless_java_linux_amd64")
#########################
